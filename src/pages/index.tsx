import { akte } from '@prisma/client';
import { type NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { Oval } from 'react-loader-spinner';
import DropDown from '~/Components/Entry/Dropdown';
import Input from '~/Components/Entry/Input';
import ItemList from '~/Components/Entry/ItemList';
import Pagination from '~/Components/Entry/Pagination';
import Navbar from '~/Components/Navbar';
import { aktenMetadata, dataview } from '~/data';
import { api } from '~/utils/api';

//TODO: get the filter data i want Akten? Aktenschrank?
const selectableItems = [
    { id: 1, name: 'Akten' },
    { id: 2, name: 'Aktenschrank' },
];

const Home: NextPage = () => {
    const [selected, setSelected] = useState(selectableItems[0]);
    const [filterName, setFilterName] = useState<string>('');
    const [filterResult, setFilterResult] = useState<akte[]>([]);
    const [splitData, setSplitData] = useState<akte[]>([]);
    const [pageNumber, setPageNumber] = useState<number>(1);
    const [pageLength, setPageLength] = useState<number>(1);
    const router = useRouter();
    const { state, ids, action, userId, ressourceKeys } = router.query;

    const { data, refetch, isFetching, isSuccess } =
        api.fileManager.getAkten.useQuery({
            name: filterName ? filterName : undefined,
        });

    // filter and fetch data
    useEffect(() => {
        refetch();
        if (data && isSuccess) {
            setFilterResult(data);
        }
    }, [filterName, refetch, data, isSuccess]);

    // split data into pages
    useEffect(() => {
        const splitArray = (arr: akte[]) => {
            const result = [];
            for (let i = 0; i < arr.length; i += 8) {
                result.push(arr.slice(i, i + 8));
            }
            return result;
        };
        if (data && isSuccess) {
            setSplitData(splitArray(data)[pageNumber - 1]);
            setPageLength(splitArray(data).length);
        }
    }, [data, pageNumber, isSuccess, refetch]);

    return (
        <>
            <Head>
                <title>Flox File Picker</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <div className="flex mt-2 w-screen justify-center gap-3">
                    {ids && action && userId && ressourceKeys && (
                        <span className="text-green-500">
                            {action} {ids} {userId} {ressourceKeys}
                        </span>
                    )}

                    <Input setFilterName={setFilterName} />
                    <DropDown
                        selectableItems={selectableItems}
                        setSelected={setSelected}
                        selected={selected}
                    />
                </div>
                <div className="">
                    {isFetching && data === undefined ? (
                        <div className="absolute inset-0 bg-black/10">
                            <div className="relative left-1/2 top-1/2 z-50">
                                <Oval
                                    height={80}
                                    width={80}
                                    color="#4fa94d"
                                    wrapperStyle={{}}
                                    wrapperClass=""
                                    visible={true}
                                    ariaLabel="oval-loading"
                                    secondaryColor="#4fa94d"
                                    strokeWidth={2}
                                    strokeWidthSecondary={2}
                                />
                            </div>
                        </div>
                    ) : (
                        <div>
                            <DataView />

                            <ItemList pageLength={1} data={splitData} />
                            <Pagination setPageNumber={setPageNumber} pageLength={pageLength}
                            />
                        </div>
                    )}
                </div>
            </main>
        </>
    );
};
function DataView() {
    const header = [
        'id',
        'name',
        'description',
        'created',
        'modified',
        'status',
        'type',
        'tags',
        'owner',
        'creator',
        'company',
        'location',
        'department',
        'category',
    ];

    return (
        <div className="px-4 sm:px-6 lg:px-2">
            <div className="sm:flex sm:items-center">
                <div className="sm:flex-auto">
                    <h1 className="text-base text-center font-semibold leading-6 text-gray-900">
                        Akte #0012910# - TestAkte
                    </h1>
                </div>
            </div>
            <div className="mt-8 flow-root">
                <div className="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
                    <div className="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
                        <table className="min-w-full divide-y divide-gray-300">
                            <thead>
                                <tr>
                                    {header.map((h) => (
                                        <th
                                            key={h}
                                            scope="col"
                                            className="px-3 py-3 text-left text-sm font-semibold text-gray-900"
                                        >
                                            {h}
                                        </th>
                                    ))}
                                </tr>
                            </thead>
                            <tbody className="bg-white">
                                {aktenMetadata.map((akteData) => (
                                    <tr
                                        key={akteData.name}
                                        className="even:bg-gray-50 hover:even:bg-gray-200 hover:bg-gray-100"
                                    >
                                        <td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-3">
                                            {akteData.id}
                                        </td>
                                        <td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-3">
                                            {akteData.name}
                                        </td>
                                        <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            {akteData.description}
                                        </td>
                                        <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            {akteData.created}
                                        </td>
                                        <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            {akteData.modified}
                                        </td>
                                        <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            {akteData.status}
                                        </td>
                                        <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            {akteData.type}
                                        </td>

                                        <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            {akteData.tags.map((tag) => (
                                                <span
                                                    key={tag}
                                                    className="mr-1 inline-flex items-center rounded-full bg-green-100 px-2.5 py-0.5 text-xs font-medium text-green-800"
                                                >
                                                    {tag}
                                                </span>
                                            ))}
                                        </td>
                                        <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            {akteData.owner}
                                        </td>

                                        <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            {akteData.creator}
                                        </td>
                                        <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            {akteData.company}
                                        </td>
                                        <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            {akteData.location}
                                        </td>
                                        <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            {akteData.department}
                                        </td>
                                        <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            {akteData.category}
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default Home;
